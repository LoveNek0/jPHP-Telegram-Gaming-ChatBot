<?php


namespace Commands;




use Engine\Database\User;
use Engine\Database\User\Permission;
use Engine\GamingBot;
use Engine\System\Logger;
use Engine\System\RegexPatterns;
use Engine\Templates\AbstractCommand;
use php\time\Time;

class CommandTrade extends AbstractCommand
{
    public $command = "trade";
    public $aliases = [
        "—Ç—Ä–µ–π–¥"
    ];
    public $descriptions = [
        "–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Ä–µ–¥—Å—Ç–≤–∞",
        "–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ —á–µ—Ä–µ–∑ ID" => ["[—Å—É–º–º–∞]", "[id]"],
        "–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ —á–µ—Ä–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–µ" => ["[—Å—É–º–º–∞]", "[–ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ]"],
    ];
    public $permission = [
        Permission::ALL
    ];

    public function onCall(GamingBot $bot, User $user, $update, string $cmd, $args = [])
    {
        $message = "üí∏ <b>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è</b>\n";
        $howToUse = "    ‚ÑπÔ∏è –î–ª—è —á–µ–≥–æ –Ω—É–∂–Ω–æ?\n";
        $howToUse .= "      –ö–æ–º–∞–Ω–¥–∞ –Ω—É–∂–Ω–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n\n";
        $howToUse .= "    üíÅ‚Äç‚ôÄÔ∏è –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?\n";
        $howToUse .= "      üîπ –í–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É\n";
        $howToUse .= "        <code>/trade [—Å—É–º–º–∞] [ID]</code>\n";
        $howToUse .= "      –≥–¥–µ\n";
        $howToUse .= "        <i>—Å—É–º–º–∞</i> - –°—É–º–º–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞\n";
        $howToUse .= "        <i>ID</i> - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n";
        $howToUse .= "      üîπ –í–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É, –æ—Ç–≤–µ—Ç–∏–≤ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n";
        $howToUse .= "        <code>/trade [—Å—É–º–º–∞]</code>\n";
        $howToUse .= "      –≥–¥–µ\n";
        $howToUse .= "        <i>—Å—É–º–º–∞</i> - –°—É–º–º–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞\n";
        if(count($args) > 0)
            if(count($args) == 1){
                $sum = $args[0];
                if(RegexPatterns::isFloat($sum) && isset($update->message->reply_to_message))
                    if(User::isExist($update->message->reply_to_message->from->id))
                        $message .= $this->trade($update->message->chat->id, User::getUser($user->getID()), User::getUser($update->message->reply_to_message->from->id), $sum);
                    else
                        $message .= "    ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω\n";
                else
                    $message .= $howToUse;
            }
            elseif(count($args) == 2){
                $sum = $args[0];
                $id = $args[1];
                if(RegexPatterns::isFloat($sum) && RegexPatterns::isInt($id))
                    if(User::isExist($id))
                        $message .= $this->trade($update->message->chat->id, User::getUser($user->getID()), User::getUser($id), $sum);
                    else
                        $message .= "    ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω\n";
                else
                    $message .= $howToUse;
            }
            else
                $message .= $howToUse;
        else
            $message .= $howToUse;
        $bot->getAPI()->sendMessage()->parse_mode("HTML")->reply_to_message_id($update->message->message_id)->text($message)->chat_id($update->message->chat->id)->query();
    }

    private function trade(int $chat_id, User $from, User $to, float $sum): string{
        if (!is_dir("./database/"))
            mkdir("./database/");
        if (!is_file("./database/transactions.json"))
            file_put_contents("./database/transactions.json", json_encode([], JSON_PRETTY_PRINT));
        $list = json_decode(file_get_contents("./database/transactions.json"), true);
        if(!isset($list["chat_" . $chat_id]))
            $list["chat_" . $chat_id] = 0;
        $id = $list["chat_" . $chat_id] + 1;
        $time = Time::now();
        $message = "";
        if($from->getID() == $to->getID()){
            $message .= "    üÜî TransID: <code>{$id}</code>\n";
            $message .= "    üíÅ‚Äç‚ôÄÔ∏è –°—Ç–∞—Ç—É—Å: <code>–ù–µ—É–¥–∞—á–Ω–æ</code>\n";
            $message .= "    ‚è≥ –í—Ä–µ–º—è: <code>" . $time->toString('dd-MM-yyyy HH:mm:ss') . "</code>\n";
            $message .= "    ‚ÑπÔ∏è –ü—Ä–∏—á–∏–Ω–∞: <code>–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å</code>";
            Logger::info("Transaction with id {$id} in chat {$chat_id} on sum {$sum} from user {$from->getID()} to user {$to->getID()} was completed with status FAILED and message \"Unable to transfer to your balance\"");
        }
        elseif($from->bank()->virtual()->get() < $sum){
            $message .= "    üÜî TransID: <code>{$id}</code>\n";
            $message .= "    üíÅ‚Äç‚ôÄÔ∏è –°—Ç–∞—Ç—É—Å: <code>–ù–µ—É–¥–∞—á–Ω–æ</code>\n";
            $message .= "    ‚è≥ –í—Ä–µ–º—è: <code>" . $time->toString('dd-MM-yyyy HH:mm:ss') . "</code>\n";
            $message .= "    ‚ÑπÔ∏è –ü—Ä–∏—á–∏–Ω–∞: <code>–°—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –±–∞–ª–∞–Ω—Å</code>";
            Logger::info("Transaction with id {$id} in chat {$chat_id} on sum {$sum} from user {$from->getID()} to user {$to->getID()} was completed with status FAILED and message \"Transaction amount exceeds balance\"");
        }
        elseif($sum <= 0){
            $message .= "    üÜî TransID: <code>{$id}</code>\n";
            $message .= "    üíÅ‚Äç‚ôÄÔ∏è –°—Ç–∞—Ç—É—Å: <code>–ù–µ—É–¥–∞—á–Ω–æ</code>\n";
            $message .= "    ‚è≥ –í—Ä–µ–º—è: <code>" . $time->toString('dd-MM-yyyy HH:mm:ss') . "</code>\n";
            $message .= "    ‚ÑπÔ∏è –ü—Ä–∏—á–∏–Ω–∞: <code>–°—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è</code>";
            Logger::info("Transaction with id {$id} in chat {$chat_id} on sum {$sum} from user {$from->getID()} to user {$to->getID()} was completed with status FAILED and message \"The transaction amount must be greater than zero\"");
        }
        else {
            $list["chat_" . $chat_id] = $id;
            $from->bank()->virtual()->sub($sum);
            $to->bank()->virtual()->add($sum);

            file_put_contents("./database/transactions.json", json_encode($list, JSON_PRETTY_PRINT));

            $message .= "    üÜî TransID: <code>{$id}</code>\n";
            $message .= "    üíÅ‚Äç‚ôÄÔ∏è –°—Ç–∞—Ç—É—Å: <code>–£—Å–ø–µ—à–Ω–æ</code>\n";
            $message .= "    ‚è≥ –í—Ä–µ–º—è: <code>" . $time->toString('dd-MM-yyyy HH:mm:ss') . "</code>\n";
            $message .= "    üí∞ –ë–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–æ–≤:\n";
            $message .= "    üí∏ <a href=\"tg://user?id={$from->getID()}\">" . (($from->login()->get() == "")?$from->name()->get():$from->login()->get()) . "</a> - <code>" . round($from->bank()->virtual()->get(), 2) . "üí≤</code>\n";
            $message .= "    üí∏ <a href=\"tg://user?id={$to->getID()}\">" . (($to->login()->get() == "")?$to->name()->get():$to->login()->get()) . "</a> - <code>" . round($to->bank()->virtual()->get(), 2) . "üí≤</code>\n";

            Logger::info("Transaction with id {$id} in chat {$chat_id} on sum {$sum} from user {$from->getID()} to user {$to->getID()} was completed with status SUCCESS");
        }
        return $message;
    }
}