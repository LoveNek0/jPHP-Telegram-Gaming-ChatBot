<?php


namespace Commands;



use Engine\Database\User;
use Engine\Database\User\Permission;
use Engine\GamingBot;
use Engine\System\RegexPatterns;
use Engine\Templates\AbstractCommand;
use php\time\Time;

class CommandBonus extends AbstractCommand
{
    public $command = "bonus";
    public $aliases = [
        "–±–æ–Ω—É—Å"
    ];
    public $descriptions = [
        "–ë–æ–Ω—É—Å–Ω—ã–µ –≤–∏—Ä—Ç—ã",
        "–í—ã–¥–∞—Ç—å –±–æ–Ω—É—Å–Ω—ã–µ –≤–∏—Ä—Ç—ã" => ["[ID|–ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ]"]
    ];
    public $permission = [
        Permission::ALL
    ];

    public function onCall(GamingBot $bot, User $user, $update, string $cmd, $args = [])
    {
        if(!is_dir("./database/"))
            mkdir("./database/");
        if(!is_file("./database/bonus.json"))
            file_put_contents("./database/bonus.json", json_encode([], JSON_PRETTY_PRINT));
        $list = json_decode(file_get_contents("./database/bonus.json"), true);
        $time = Time::millis();
        $id = -1;
        $message = "üí∞ <b>–ë–æ–Ω—É—Å</b>\n";
        $suck = false;
        if($user->permission()->get() == Permission::MODERATOR || $user->permission()->get() == Permission::OWNER)
            if(count($args) == 1) {
                if (RegexPatterns::isInt($args[0])) {
                    $id = $args[0];
                    $suck = true;
                }
                else
                    $message .= "    ‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º";
            }
            elseif(count($args) == 0) {
                $suck = true;
                if(isset($update->message->reply_to_message->from))
                    $id = $update->message->reply_to_message->from->id;
                else
                    $id = $user->getID();
            }
            else
                $message .= "    ‚ùå –ö–æ–º–∞–Ω–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä";
        else
            if(count($args) == 0) {
                if(isset($update->message->reply_to_message))
                    $message .= "    ‚ùå –í—ã–¥–∞–≤–∞—Ç—å –±–æ–Ω—É—Å—ã –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã";
                else {
                    $id = $user->getID();
                    $suck = true;
                }
            }
            else
                $message .= "    ‚ùå –í—ã–¥–∞–≤–∞—Ç—å –±–æ–Ω—É—Å—ã –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã";

        if($suck){
            if(!User::isExist($id))
                $message .= "    ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω";
            else{
                $to = User::getUser($id);
                if(!isset($list["user_" . $to->getID()]))
                    $list["user_" . $to->getID()] = 0;
                $last = $list["user_" . $to->getID()];

                $coolDown = 24*60*60*1000;

                if($to->permission()->get() == Permission::VIP)
                    $coolDown /= 2;
                if($to->permission()->get() == Permission::MODERATOR)
                    $coolDown /= 4;
                if($to->permission()->get() == Permission::OWNER)
                    $coolDown = 0;

                if($time < $last + $coolDown)
                    $t = ($last + $coolDown) - $time;
                else
                    $t = $coolDown;

                $h = (int)($t/(60*60*1000));
                $m = (int)(($t - $h * (60*60*1000))/(60*1000));
                $s = (int)(($t - $h*60*60*1000 - $m*60*1000) / 1000);
                $ms = (int)($t - $h*60*60*1000 - $m*60*1000 - $s*1000);

                if($time < $last + $coolDown)
                    $message .= "    ‚è≥ –ë–æ–Ω—É—Å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ <code>" . ($h>0?$h."—á ":"") . ($m>0?$m."–º–∏–Ω ":"") . ($s>0?$s."—Å–µ–∫ ":"") . (($h+$m+$s == 0)?$ms."–º—Å ":"") . "</code>";
                else {
                    if ($to->permission()->get() == Permission::VIP)
                        $rand = (float)(rand(10000, 50000) . "." . rand(0, 99));
                    else
                        $rand = (float)(rand(1000, 10000) . "." . rand(0, 99));
                    $message .= "    üßê –ü–æ–ª—É—á–∞—Ç–µ–ª—å: <a href=\"tg://user?id={$to->getID()}\">" . (($to->login()->get() == "") ? $to->name()->get() : "@" . $to->login()->get()) . "</a>\n";
                    $message .= "    üíµ –°—É–º–º–∞: <code>{$rand}</code>üí≤\n";
                    $message .= "    ‚è≥ –°–ª–µ–¥—É—é—â–∏–π –±–æ–Ω—É—Å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑: <code>" . ($h>0?$h."—á ":"") . ($m>0?$m."–º–∏–Ω ":"") . ($s>0?$s."—Å–µ–∫ ":"") . (($h+$m+$s == 0)?$ms."–º—Å ":"") . "</code>";
                    $to->bank()->virtual()->add($rand);
                    $list["user_" . $to->getID()] = $time;
                }
            }
        }
        file_put_contents("./database/bonus.json", json_encode($list, JSON_PRETTY_PRINT));
        $bot->getAPI()->sendMessage()->chat_id($update->message->chat->id)->reply_to_message_id($update->message->message_id)->text($message)->parse_mode("HTML")->query();
    }
}