<?php


namespace Commands;




use Engine\Database\User;
use Engine\Database\User\Permission;
use Engine\GamingBot;
use Engine\Templates\AbstractCommand;

class CommandHelp extends AbstractCommand
{
    public $command = "help";
    public $aliases = [
        "–ø–æ–º–æ—â—å",
        "—Ö–µ–ª–ø"
    ];
    public $descriptions = [
        "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥",
        "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∞–Ω–¥–µ" => ["[–∫–æ–º–∞–Ω–¥–∞]"]
    ];
    public $permission = [
        Permission::ALL
    ];

    public function onCall(GamingBot $bot, User $user, $update, string $cmd, $args = [])
    {
        $message = @"‚ùì <b>–ü–æ–º–æ—â—å</b>\n";
        if(count($args) > 0){
            $e = true;
            foreach ($bot->getCommandList() as $command)
                if(in_array($args[0], $command->aliases) || $args[0] == $command->command) {
                    $e = false;
                    if(!in_array($user->permission()->get(), $command->permission) && !in_array(Permission::ALL, $command->permission)) {
                        $message .= "    ‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ \"/{$command->command}\" –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!";
                        break;
                    }
                    foreach ($command->descriptions as $key => $value){
                        $message .= "    üîπ/".$command->command;
                        if(is_array($value))
                            foreach ($value as $item)
                                $message .= " <i>{$item}</i>";
                        else
                            $key = $value;
                        $message .= " - " . $key . "\n";
                    }
                    if(count($command->aliases) > 0) {
                        $message .= "\n    üîª –¢–∞–∫ –∂–µ –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –∫–∞–∫: \n";
                        foreach ($command->aliases as $alias)
                            $message .= "        üî∏ <code>." . $alias . "</code>\n";
                    }
                    break;
                }
            if($e)
                $message .= "    ‚ùå –ö–æ–º–∞–Ω–¥–∞ \"{$args[0]}\" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!";
        }
        else{
            $message .= "    üíÅ‚Äç‚ôÄÔ∏è –ß—Ç–æ –±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ, –≤–≤–µ–¥–∏—Ç–µ\n";
            $message .= "        <code>/help [–∫–æ–º–∞–Ω–¥–∞]</code>\n\n";
            $message .= "    üìì –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n";
            foreach ($bot->getCommandList() as $command){
                if(!in_array($user->permission()->get(), $command->permission) && !in_array(Permission::ALL, $command->permission))
                    continue;
                $message .= "      üîπ /" . $command->command;
                if(isset($command->descriptions[0]))
                    $message .= " - " . $command->descriptions[0];
                else {
                    foreach ($command->descriptions as $description => $params) {
                        if (is_array($params))
                            foreach ($params as $item)
                                $message .= " {$item}";
                        $message .= " - " . $description;
                        break;
                    }
                }
                $message .= "\n";
            }
        }
        $bot->getAPI()->sendMessage()->text($message)->chat_id($update->message->chat->id)->reply_to_message_id($update->message->message_id)->parse_mode("HTML")->query();
    }

}